<!DOCTYPE html>
<html lang="en">
  <head>
    <%- include('../partials/head'); %>
    <script
      src="https://code.jquery.com/jquery-3.7.1.js"
      integrity="sha256-eKhayi8LEQwp4NKxN+CfCh+3qOVUtJn3QNZ0TciWLP4="
      crossorigin="anonymous"
    ></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/js/select2.full.min.js"></script>

    <link
      href="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/css/select2.min.css"
      rel="stylesheet"
    />
    <script src="https://cdn.ckeditor.com/ckeditor5/36.0.1/classic/ckeditor.js"></script>
  </head>
  <body class="bg-dark">
    <nav
      class="navbar navbar-expand-lg navbar-light bg-light flex flex-row justify-content-between"
    >
      <a class="navbar-brand" href="/">
        <% if(user ) { %>
        <h5>welcome <%= (user.name) %></h5>
        <% } else { %>
        <h5>Welcome</h5>
        <% } %>
      </a>
      <form class="form-inline">
        <button class="btn my-2 my-sm-0">
          <% if(user == null) { %>
          <a href="/login"> Login </a>
          <% }else{ %>
          <a href="/logout"> Logout </a>
          <% } %>
        </button>
      </form>
    </nav>
    <script>
      let userId = <%= JSON.stringify(user.id) %>;
      const urlParams = new URLSearchParams(window.location.search);
      const postId = urlParams.get("id");
    </script>

    <div class="container mt-3 d-flex justify-content-center">
      <div class="border rounded bg-dark shadow-lg">
        <form class="m-5" enctype="multipart/form-data">
          <div class="mb-3">
            <label for="title" class="form-label text-white">Title</label>
            <input
              type="text"
              class="form-control"
              name="title"
              placeholder="Enter title"
              required
            />
          </div>
          <div class="mb-3">
            <label for="summary" class="form-label text-white">Summary</label>
            <input
              class="form-control"
              name="summary"
              id="summary"
              placeholder="Enter Summary (maximum 300 words)"
              required
              oninput="limitInputLength(this.value, 300)"
            />
          </div>
          <div class="mb-3">
            <label for="imgurl" class="form-label text-white">Image URL</label>
            <input
              type="file"
              class="form-control"
              name="image"
              id="img"
              accept=".jpg, .jpeg, .png"
            />
          </div>
          <div class="mb-3">
            <label for="catg" class="form-label text-white"
              >Choose a Category:</label
            >
            <select id="categoriesContainer" class="form-control">
              <!-- we will add content dynamically -->
            </select>
          </div>
          <div class="mb-3">
            <label for="tags" class="form-label text-white">Enter Tags</label>
            <input
              type="text"
              class="form-control"
              name="tags"
              placeholder="Enter Tags"
            />
          </div>
          <div class="mb-3">
            <label for="des" class="form-label text-white">Content</label>
            <textarea
              class="form-control"
              name="content"
              id="description"
              placeholder="Enter Content..."
              required
            ></textarea>
          </div>
          <div id="submitButton"></div>
        </form>
      </div>
    </div>

    <script>
      let uploadField = document.getElementById("img");
      uploadField.onchange = function () {
        if (this.files[0].size > 3 * 1024 * 1024) {
          alert("File is too big!");
          this.value = "";
        }
        let filePath = uploadField.value;
        let allowedExtensions = /(\.jpg|\.jpeg|\.png)$/i;
        if (!allowedExtensions.exec(filePath)) {
          alert("Invalid file type");
          this.value = "";
        }
      };

      // ckeditor
      let editor;
      ClassicEditor.create(document.querySelector("#description"))
        .then((instance) => {
          editor = instance;
        })
        .catch((error) => {
          console.error(error);
        });

      //limiting the words
      function limitInputLength(value, maxWords) {
        const words = value.split(/\s+/).filter((word) => word.length > 0);

        if (words.length > maxWords) {
          const trimmedWords = words.slice(0, maxWords);
          return trimmedWords.join(" ");
        }
        return value;
      }

      document.addEventListener("DOMContentLoaded", function () {
        const submitButton = document.getElementById("submitButton");
        if (postId) {
          submitButton.innerHTML =
            '<button onclick="handleUpdate(event)" class="btn btn-success">Update</button>';
        } else {
          submitButton.innerHTML =
            '<button onclick="handleSubmit(event)" class="btn btn-warning">Create</button>';
        }

        fetch("http://localhost:3000/api/v1/category/read")
          .then((response) => response.json())
          .then((categories) => {
            displayCategories(categories.data);
          })
          .catch((error) => {
            console.error("Error fetching categories:", error);
          });

        if (postId) {
          fetch(`http://localhost:3000/api/v1/posts/read?id=${postId}`)
            .then((response) => response.json())
            .then((postData) => {
              fillFormWithPostData(postData.data);
            })
            .catch((error) => {
              console.error("Error fetching post data:", error);
            });
        }
        function fillFormWithPostData(postData) {
          const titleInput = document.querySelector('input[name="title"]');
          const categorySelect = document.getElementById("categoriesContainer");
          const summaryInput = document.getElementById("summary");
          const tags = document.querySelector('input[name="tags"]');

          titleInput.value = postData.title;
          categorySelect.value = postData.categoryId;
          tags.value = postData.tags;
          summaryInput.value = postData.summary;

          if (editor) {
            editor.setData(postData.postText);
          } else {
            console.error("CKEditor instance not available");
          }
        }
      });
      function displayCategories(categories) {
        const categoriesContainer = $("#categoriesContainer");

        categoriesContainer.empty();
        categoriesContainer.append(
          "<option disabled selected>Select category</option>"
        );
        categories.forEach((category) => {
          const option = $("<option>", {
            value: category.id,
            text: category.name,
          });
          categoriesContainer.append(option);
        });

        categoriesContainer.select2();
      }

      // handle submit and update
      function handleSubmit(event) {
        event.preventDefault();

        const title = document.querySelector('input[name="title"]').value;
        const imageInput = document.querySelector('input[name="image"]');
        const summaryInput = document.getElementById("summary").value;
        const tags = document.querySelector('input[name="tags"]').value;
        const categoryId = parseInt(
          document.getElementById("categoriesContainer").value
        );

        if (editor) {
          const postText = editor.getData();

          // Create FormData object
          const formData = new FormData();
          formData.append("title", title);
          formData.append("image", imageInput.files[0]);
          formData.append("postText", postText);
          formData.append("userId", userId);
          formData.append("categoryId", categoryId);
          formData.append("tags", tags);
          formData.append("summary", summaryInput);

          console.log(tags, summaryInput);
          fetch("http://localhost:3000/api/v1/posts/create", {
            method: "POST",
            body: formData,
          })
            .then((response) => response.json())
            .then((data) => {
              if (data.success) {
                window.location.href = "/";
              } else alert(data.data);
            })
            .catch((error) => {
              console.error("Error adding blog:", error);
            });
        } else {
          console.error("Editor instance not available");
        }
      }

      function handleUpdate(event) {
        event.preventDefault();

        const title = document.querySelector('input[name="title"]').value;
        const imageInput = document.querySelector('input[name="image"]');
        const summaryInput = document.getElementById("summary").value;
        const tags = document.querySelector('input[name="tags"]').value;
        const categoryId = parseInt(
          document.getElementById("categoriesContainer").value
        );

        if (editor) {
          const postText = editor.getData();

          // Create FormData object
          const formData = new FormData();
          formData.append("title", title);
          formData.append("image", imageInput.files[0]);
          formData.append("postText", postText);
          formData.append("userId", userId);
          formData.append("categoryId", categoryId);
          formData.append("tags", tags);
          formData.append("summary", summaryInput);

          fetch(`http://localhost:3000/api/v1/posts/update/${postId}`, {
            method: "PUT",
            body: formData,
          })
            .then((response) => response.json())
            .then((data) => {
              if (data.success) {
                window.location.href = "/";
              } else alert(data.data);
            })
            .catch((error) => {
              console.error("Error updating blog:", error);
            });
        } else {
          console.error("Editor instance not available");
        }
      }
    </script>
  </body>
</html>
